# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

__author__ = "Arielle R Munters"
__copyright__ = "Copyright 2022, Arielle R Munters"
__email__ = "arielle.munters@scilifelab.uu.se"
__license__ = "GPL-3"


ruleorder: pindel_processing_annotation_vep > annotation_vep
ruleorder: pindel_processing_artifact_annotation > annotation_artifact_annotation
ruleorder: svdb_merge_wo_priority > cnv_sv_svdb_merge


include: "rules/common.smk"
include: "rules/cnv_tsv_reports.smk"
include: "rules/svdb.smk"
include: "rules/pindel_processing.smk"


report: "report/workflow.rst"


rule all:
    input:
        compile_output_file_list,


module alignment:
    snakefile:
        github(
            "hydra-genetics/alignment",
            path="workflow/Snakefile",
            tag="v0.5.1",
        )
    config:
        config


use rule * from alignment as alignment_*


module annotation:
    snakefile:
        github(
            "hydra-genetics/annotation",
            path="workflow/Snakefile",
            tag="v1.0.0",
        )
    config:
        config


use rule * from annotation as annotation_*


module cnv_sv:
    snakefile:
        github("hydra-genetics/cnv_sv", path="workflow/Snakefile", tag="1aa9a68")
    config:
        config


use rule * from cnv_sv as cnv_sv_*


use rule cnvkit_call from cnv_sv as cnv_sv_cnvkit_call with:
    input:
        segment="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cns",
        vcf="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.vcf.gz",
        purity=cnv_sv.get_tc_file,


use rule pindel_generate_config from cnv_sv as cnv_sv_pindel_generate_config with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        metrics="qc/picard_collect_insert_size_metrics/{sample}_{type}.insert_size_metrics.txt",


module filtering:
    snakefile:
        github(
            "hydra-genetics/filtering",
            path="workflow/Snakefile",
            tag="v0.3.0",
        )
    config:
        config


use rule * from filtering as filtering_*


module prealignment:
    snakefile:
        github(
            "hydra-genetics/prealignment",
            path="workflow/Snakefile",
            tag="v1.2.0",
        )
    config:
        config


use rule * from prealignment as prealignment_*


module reports:
    snakefile:
        github(
            "hydra-genetics/reports",
            path="workflow/Snakefile",
            tag="v0.3.1",
        )
    config:
        config


use rule * from reports as reports_*


use rule cnv_html_report from reports as reports_cnv_html_report with:
    input:
        json="reports/cnv_html_report/{sample}_{type}.{tc_method}.merged.json",
        html_template=workflow.get_rule("reports_cnv_html_report").input.html_template,
        js_files=workflow.get_rule("reports_cnv_html_report").input.js_files,
        css_files=workflow.get_rule("reports_cnv_html_report").input.css_files,
        tc_file=reports.get_tc_file,
        extra_table_files=[t["path"] for t in config.get("cnv_html_report", {}).get("extra_tables", [])],
    params:
        extra_tables=config.get("cnv_html_report", {}).get("extra_tables", []),
        include_table=config.get("cnv_html_report", {}).get("show_table", True),
        tc=reports.get_tc,
        tc_method=lambda wildcards: wildcards.tc_method,
        include_cytobands=config.get("cnv_html_report", {}).get("cytobands", False),


module snv_indels:
    snakefile:
        github(
            "hydra-genetics/snv_indels",
            path="workflow/Snakefile",
            tag="v0.6.0",
        )
    config:
        config


use rule * from snv_indels as snv_indels_*


use rule vt_decompose from snv_indels as snv_indels_vt_decompose_pindel with:
    input:
        vcf="cnv_sv/pindel_vcf/{sample}_{type}.no_tc.fix_af.vcf.gz",
    output:
        vcf=temp("cnv_sv/pindel_vcf/{sample}_{type}.no_tc.decomposed.vcf.gz"),
    log:
        "cnv_sv/pindel_vcf/{sample}_{type}.no_tc.decomposed.vcf.gz.log",
    benchmark:
        repeat(
            "cnv_sv/pindel_vcf/{sample}_{type}.no_tc.decomposed.vcf.gz.benchmark.tsv",
            config.get("vt_decompose", {}).get("benchmark_repeats", 1),
        )


use rule vt_normalize from snv_indels as snv_indels_vt_normalize_pindel with:
    input:
        vcf="cnv_sv/pindel_vcf/{sample}_{type}.no_tc.decomposed.vcf.gz",
        ref=config["reference"]["fasta"],
    output:
        vcf=temp("cnv_sv/pindel_vcf/{sample}_{type}.no_tc.normalized.vcf.gz"),
    log:
        "cnv_sv/pindel_vcf/{sample}_{type}.no_tc.normalized.vcf.gz.log",
    benchmark:
        repeat(
            "cnv_sv/pindel_vcf/{sample}_{type}.no_tc.normalized.vcf.gz.benchmark.tsv",
            config.get("vt_normalize", {}).get("benchmark_repeats", 1),
        )


module qc:
    snakefile:
        github(
            "hydra-genetics/qc",
            path="workflow/Snakefile",
            tag="v0.4.1",
        )
    config:
        config


use rule * from qc as qc_*


use rule mosdepth_bed from qc as qc_mosdepth_bed with:
    output:
        bed=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz.csi"),
        coverage=temp("qc/mosdepth_bed/{sample}_{type}.per-base.bed.gz"),
        coverage_csi=temp("qc/mosdepth_bed/{sample}_{type}.per-base.bed.gz.csi"),
        thresholds=temp("qc/mosdepth_bed/{sample}_{type}.thresholds.bed.gz"),
        glob=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.global.dist.txt"),
        region=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.summary.txt"),
    params:
        thresholds=config["mosdepth_bed"]["thresholds"],


use rule multiqc from qc as qc_multiqc with:
    input:
        files=lambda wildcards: set(
            [
                file.format(sample=sample, type=u.type, lane=u.lane, flowcell=u.flowcell, barcode=u.barcode, read=read, ext=ext)
                for file in config["multiqc"]["reports"][wildcards.report]["qc_files"]
                for sample in get_samples(samples)
                for u in units.loc[sample].dropna().itertuples()
                if u.type in config["multiqc"]["reports"][wildcards.report]["included_unit_types"]
                for read in ["fastq1", "fastq2"]
                for ext in config.get("picard_collect_multiple_metrics", {}).get("output_ext", [""])
            ]
        ),
        config=lambda wildcards: config["multiqc"]["reports"][wildcards.report]["config"],
